// Generated by gencpp from file gazebo_plugins_local/GazeboGetJointsAxesResponse.msg
// DO NOT EDIT!


#ifndef GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESRESPONSE_H
#define GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <joint_prediction/JointAxis.h>

namespace gazebo_plugins_local
{
template <class ContainerAllocator>
struct GazeboGetJointsAxesResponse_
{
  typedef GazeboGetJointsAxesResponse_<ContainerAllocator> Type;

  GazeboGetJointsAxesResponse_()
    : joints_axes()  {
    }
  GazeboGetJointsAxesResponse_(const ContainerAllocator& _alloc)
    : joints_axes(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::joint_prediction::JointAxis_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::joint_prediction::JointAxis_<ContainerAllocator> >> _joints_axes_type;
  _joints_axes_type joints_axes;





  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GazeboGetJointsAxesResponse_

typedef ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<std::allocator<void> > GazeboGetJointsAxesResponse;

typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesResponse > GazeboGetJointsAxesResponsePtr;
typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesResponse const> GazeboGetJointsAxesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.joints_axes == rhs.joints_axes;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_plugins_local

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08b59aae1c5d00eacc50f5ec07cd5065";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08b59aae1c5d00eaULL;
  static const uint64_t static_value2 = 0xcc50f5ec07cd5065ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_plugins_local/GazeboGetJointsAxesResponse";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# list of joints axes \n"
"joint_prediction/JointAxis[] joints_axes\n"
"\n"
"================================================================================\n"
"MSG: joint_prediction/JointAxis\n"
"# This message defines the joint axes of a robot. \n"
"\n"
"# The name of the joint\n"
"std_msgs/String joint_name\n"
"# Axis direction\n"
"geometry_msgs/Vector3 axis\n"
"# The origin of axis vector \n"
"geometry_msgs/Vector3 origin\n"
"# The joint type (same order as defined in Gazebo)\n"
"#   Joint_Type_REVOLUTE = 1,\n"
"#   Joint_Type_REVOLUTE2 = 2,\n"
"#   Joint_Type_PRISMATIC = 3,\n"
"#   Joint_Type_UNIVERSAL = 4,\n"
"#   Joint_Type_BALL = 5,\n"
"#   Joint_Type_SCREW = 6,\n"
"#   Joint_Type_GEARBOX = 7,\n"
"#   Joint_Type_FIXED = 8\n"
"###########################\n"
"uint8 type \n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joints_axes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GazeboGetJointsAxesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_plugins_local::GazeboGetJointsAxesResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "joints_axes: ";
    if (v.joints_axes.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.joints_axes.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::joint_prediction::JointAxis_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.joints_axes[i]);
    }
    if (v.joints_axes.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESRESPONSE_H
