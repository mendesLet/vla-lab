// Generated by gencpp from file gazebo_plugins_local/GazeboGetBoundingBoxesResponse.msg
// DO NOT EDIT!


#ifndef GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETBOUNDINGBOXESRESPONSE_H
#define GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETBOUNDINGBOXESRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <grasp_detection/BoundingBox3D.h>

namespace gazebo_plugins_local
{
template <class ContainerAllocator>
struct GazeboGetBoundingBoxesResponse_
{
  typedef GazeboGetBoundingBoxesResponse_<ContainerAllocator> Type;

  GazeboGetBoundingBoxesResponse_()
    : bboxes_3d()  {
    }
  GazeboGetBoundingBoxesResponse_(const ContainerAllocator& _alloc)
    : bboxes_3d(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::grasp_detection::BoundingBox3D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >> _bboxes_3d_type;
  _bboxes_3d_type bboxes_3d;





  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GazeboGetBoundingBoxesResponse_

typedef ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<std::allocator<void> > GazeboGetBoundingBoxesResponse;

typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse > GazeboGetBoundingBoxesResponsePtr;
typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse const> GazeboGetBoundingBoxesResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator2> & rhs)
{
  return lhs.bboxes_3d == rhs.bboxes_3d;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_plugins_local

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4a5148ef6b2e02f98aaa72ae4f26020a";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4a5148ef6b2e02f9ULL;
  static const uint64_t static_value2 = 0x8aaa72ae4f26020aULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_plugins_local/GazeboGetBoundingBoxesResponse";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_detection/BoundingBox3D[] bboxes_3d\n"
"\n"
"\n"
"================================================================================\n"
"MSG: grasp_detection/BoundingBox3D\n"
"# A 3D bounding box that can be positioned and rotated about its center (6 DOF)\n"
"# Dimensions of this box are in meters\n"
"\n"
"# ID or label of the detected object\n"
"string object_id\n"
"\n"
"# The 3D position and orientation of the bounding box center\n"
"geometry_msgs/Pose center\n"
"\n"
"# The size of the bounding box, in meters, surrounding the object's center\n"
"geometry_msgs/Vector3 size\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bboxes_3d);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GazeboGetBoundingBoxesResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_plugins_local::GazeboGetBoundingBoxesResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "bboxes_3d: ";
    if (v.bboxes_3d.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.bboxes_3d.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.bboxes_3d[i]);
    }
    if (v.bboxes_3d.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETBOUNDINGBOXESRESPONSE_H
