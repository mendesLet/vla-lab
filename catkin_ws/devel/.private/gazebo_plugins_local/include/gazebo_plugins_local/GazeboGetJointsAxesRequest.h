// Generated by gencpp from file gazebo_plugins_local/GazeboGetJointsAxesRequest.msg
// DO NOT EDIT!


#ifndef GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESREQUEST_H
#define GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>

namespace gazebo_plugins_local
{
template <class ContainerAllocator>
struct GazeboGetJointsAxesRequest_
{
  typedef GazeboGetJointsAxesRequest_<ContainerAllocator> Type;

  GazeboGetJointsAxesRequest_()
    : joint_names()  {
    }
  GazeboGetJointsAxesRequest_(const ContainerAllocator& _alloc)
    : joint_names(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::String_<ContainerAllocator> >> _joint_names_type;
  _joint_names_type joint_names;





  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GazeboGetJointsAxesRequest_

typedef ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<std::allocator<void> > GazeboGetJointsAxesRequest;

typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesRequest > GazeboGetJointsAxesRequestPtr;
typedef boost::shared_ptr< ::gazebo_plugins_local::GazeboGetJointsAxesRequest const> GazeboGetJointsAxesRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator2> & rhs)
{
  return lhs.joint_names == rhs.joint_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator1> & lhs, const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace gazebo_plugins_local

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57f478cadc356ab1662772b4712e2e04";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57f478cadc356ab1ULL;
  static const uint64_t static_value2 = 0x662772b4712e2e04ULL;
};

template<class ContainerAllocator>
struct DataType< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gazebo_plugins_local/GazeboGetJointsAxesRequest";
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# list of joint names  \n"
"std_msgs/String[] joint_names\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GazeboGetJointsAxesRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gazebo_plugins_local::GazeboGetJointsAxesRequest_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "joint_names: ";
    if (v.joint_names.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.joint_names.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.joint_names[i]);
    }
    if (v.joint_names.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GAZEBO_PLUGINS_LOCAL_MESSAGE_GAZEBOGETJOINTSAXESREQUEST_H
