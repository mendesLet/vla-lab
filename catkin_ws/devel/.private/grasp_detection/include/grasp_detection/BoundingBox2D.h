// Generated by gencpp from file grasp_detection/BoundingBox2D.msg
// DO NOT EDIT!


#ifndef GRASP_DETECTION_MESSAGE_BOUNDINGBOX2D_H
#define GRASP_DETECTION_MESSAGE_BOUNDINGBOX2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_detection
{
template <class ContainerAllocator>
struct BoundingBox2D_
{
  typedef BoundingBox2D_<ContainerAllocator> Type;

  BoundingBox2D_()
    : object_id()
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)  {
    }
  BoundingBox2D_(const ContainerAllocator& _alloc)
    : object_id(_alloc)
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_id_type;
  _object_id_type object_id;

   typedef int32_t _x_min_type;
  _x_min_type x_min;

   typedef int32_t _y_min_type;
  _y_min_type y_min;

   typedef int32_t _x_max_type;
  _x_max_type x_max;

   typedef int32_t _y_max_type;
  _y_max_type y_max;





  typedef boost::shared_ptr< ::grasp_detection::BoundingBox2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_detection::BoundingBox2D_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox2D_

typedef ::grasp_detection::BoundingBox2D_<std::allocator<void> > BoundingBox2D;

typedef boost::shared_ptr< ::grasp_detection::BoundingBox2D > BoundingBox2DPtr;
typedef boost::shared_ptr< ::grasp_detection::BoundingBox2D const> BoundingBox2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_detection::BoundingBox2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_detection::BoundingBox2D_<ContainerAllocator1> & lhs, const ::grasp_detection::BoundingBox2D_<ContainerAllocator2> & rhs)
{
  return lhs.object_id == rhs.object_id &&
    lhs.x_min == rhs.x_min &&
    lhs.y_min == rhs.y_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_max == rhs.y_max;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_detection::BoundingBox2D_<ContainerAllocator1> & lhs, const ::grasp_detection::BoundingBox2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::BoundingBox2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::BoundingBox2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::BoundingBox2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c4fc0b85aa66abd487251c52c48c7267";
  }

  static const char* value(const ::grasp_detection::BoundingBox2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc4fc0b85aa66abd4ULL;
  static const uint64_t static_value2 = 0x87251c52c48c7267ULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_detection/BoundingBox2D";
  }

  static const char* value(const ::grasp_detection::BoundingBox2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The message defines the 2D bounding box of a certain object in the image.\n"
"\n"
"# ID or label of the detected object\n"
"string object_id\n"
"\n"
"# 2D coordinatses of the bounding box in the image plane\n"
"int32 x_min\n"
"int32 y_min\n"
"int32 x_max\n"
"int32 y_max\n"
;
  }

  static const char* value(const ::grasp_detection::BoundingBox2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.x_min);
      stream.next(m.y_min);
      stream.next(m.x_max);
      stream.next(m.y_max);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_detection::BoundingBox2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_detection::BoundingBox2D_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_min);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_min);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "x_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_max);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "y_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_max);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_DETECTION_MESSAGE_BOUNDINGBOX2D_H
