// Generated by gencpp from file grasp_detection/Grasp.msg
// DO NOT EDIT!


#ifndef GRASP_DETECTION_MESSAGE_GRASP_H
#define GRASP_DETECTION_MESSAGE_GRASP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>

namespace grasp_detection
{
template <class ContainerAllocator>
struct Grasp_
{
  typedef Grasp_<ContainerAllocator> Type;

  Grasp_()
    : object_id()
    , grasp_pose()
    , grasp_width(0.0)
    , grasp_depth(0.0)
    , grasp_score(0.0)  {
    }
  Grasp_(const ContainerAllocator& _alloc)
    : object_id(_alloc)
    , grasp_pose(_alloc)
    , grasp_width(0.0)
    , grasp_depth(0.0)
    , grasp_score(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_id_type;
  _object_id_type object_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _grasp_pose_type;
  _grasp_pose_type grasp_pose;

   typedef double _grasp_width_type;
  _grasp_width_type grasp_width;

   typedef double _grasp_depth_type;
  _grasp_depth_type grasp_depth;

   typedef double _grasp_score_type;
  _grasp_score_type grasp_score;





  typedef boost::shared_ptr< ::grasp_detection::Grasp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_detection::Grasp_<ContainerAllocator> const> ConstPtr;

}; // struct Grasp_

typedef ::grasp_detection::Grasp_<std::allocator<void> > Grasp;

typedef boost::shared_ptr< ::grasp_detection::Grasp > GraspPtr;
typedef boost::shared_ptr< ::grasp_detection::Grasp const> GraspConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_detection::Grasp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_detection::Grasp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_detection::Grasp_<ContainerAllocator1> & lhs, const ::grasp_detection::Grasp_<ContainerAllocator2> & rhs)
{
  return lhs.object_id == rhs.object_id &&
    lhs.grasp_pose == rhs.grasp_pose &&
    lhs.grasp_width == rhs.grasp_width &&
    lhs.grasp_depth == rhs.grasp_depth &&
    lhs.grasp_score == rhs.grasp_score;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_detection::Grasp_<ContainerAllocator1> & lhs, const ::grasp_detection::Grasp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::Grasp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::Grasp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::Grasp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::Grasp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::Grasp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::Grasp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_detection::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93b875bae0cc2881618b2d917c5f5523";
  }

  static const char* value(const ::grasp_detection::Grasp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93b875bae0cc2881ULL;
  static const uint64_t static_value2 = 0x618b2d917c5f5523ULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_detection::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_detection/Grasp";
  }

  static const char* value(const ::grasp_detection::Grasp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_detection::Grasp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines the grasp detection results from the models \n"
"# TODO: consider all other possible information that can be useful for manipulation\n"
"\n"
"string object_id \n"
"\n"
"# The grasp pose \n"
"geometry_msgs/Pose grasp_pose\n"
"\n"
"# The grasp width\n"
"float64 grasp_width \n"
"\n"
"# The grasp depth \n"
"float64 grasp_depth\n"
"\n"
"# The score of the grasp, which is the probability of the grasp being successful\n"
"float64 grasp_score\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::grasp_detection::Grasp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_detection::Grasp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.grasp_pose);
      stream.next(m.grasp_width);
      stream.next(m.grasp_depth);
      stream.next(m.grasp_score);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Grasp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_detection::Grasp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_detection::Grasp_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "grasp_pose: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.grasp_pose);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "grasp_width: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_width);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "grasp_depth: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_depth);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "grasp_score: ";
    Printer<double>::stream(s, indent + "  ", v.grasp_score);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_DETECTION_MESSAGE_GRASP_H
