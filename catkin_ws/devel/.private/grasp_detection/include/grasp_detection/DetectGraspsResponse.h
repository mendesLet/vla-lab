// Generated by gencpp from file grasp_detection/DetectGraspsResponse.msg
// DO NOT EDIT!


#ifndef GRASP_DETECTION_MESSAGE_DETECTGRASPSRESPONSE_H
#define GRASP_DETECTION_MESSAGE_DETECTGRASPSRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <grasp_detection/Grasp.h>

namespace grasp_detection
{
template <class ContainerAllocator>
struct DetectGraspsResponse_
{
  typedef DetectGraspsResponse_<ContainerAllocator> Type;

  DetectGraspsResponse_()
    : grasps()  {
    }
  DetectGraspsResponse_(const ContainerAllocator& _alloc)
    : grasps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::grasp_detection::Grasp_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::grasp_detection::Grasp_<ContainerAllocator> >> _grasps_type;
  _grasps_type grasps;





  typedef boost::shared_ptr< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> const> ConstPtr;

}; // struct DetectGraspsResponse_

typedef ::grasp_detection::DetectGraspsResponse_<std::allocator<void> > DetectGraspsResponse;

typedef boost::shared_ptr< ::grasp_detection::DetectGraspsResponse > DetectGraspsResponsePtr;
typedef boost::shared_ptr< ::grasp_detection::DetectGraspsResponse const> DetectGraspsResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator1> & lhs, const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator2> & rhs)
{
  return lhs.grasps == rhs.grasps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator1> & lhs, const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f9e14a891c84f5d35c070b62fd65ceb";
  }

  static const char* value(const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f9e14a891c84f5dULL;
  static const uint64_t static_value2 = 0x35c070b62fd65cebULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_detection/DetectGraspsResponse";
  }

  static const char* value(const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Grasps\n"
"Grasp[] grasps\n"
"\n"
"================================================================================\n"
"MSG: grasp_detection/Grasp\n"
"# This message defines the grasp detection results from the models \n"
"# TODO: consider all other possible information that can be useful for manipulation\n"
"\n"
"string object_id \n"
"\n"
"# The grasp pose \n"
"geometry_msgs/Pose grasp_pose\n"
"\n"
"# The grasp width\n"
"float64 grasp_width \n"
"\n"
"# The grasp depth \n"
"float64 grasp_depth\n"
"\n"
"# The score of the grasp, which is the probability of the grasp being successful\n"
"float64 grasp_score\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.grasps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DetectGraspsResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_detection::DetectGraspsResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_detection::DetectGraspsResponse_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "grasps: ";
    if (v.grasps.empty() || false)
      s << "[";
    for (size_t i = 0; i < v.grasps.size(); ++i)
    {
      if (false && i > 0)
        s << ", ";
      else if (!false)
        s << std::endl << indent << "  -";
      Printer< ::grasp_detection::Grasp_<ContainerAllocator> >::stream(s, false ? std::string() : indent + "    ", v.grasps[i]);
    }
    if (v.grasps.empty() || false)
      s << "]";
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_DETECTION_MESSAGE_DETECTGRASPSRESPONSE_H
