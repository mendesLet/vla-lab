// Generated by gencpp from file grasp_detection/BoundingBox3D.msg
// DO NOT EDIT!


#ifndef GRASP_DETECTION_MESSAGE_BOUNDINGBOX3D_H
#define GRASP_DETECTION_MESSAGE_BOUNDINGBOX3D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Pose.h>
#include <geometry_msgs/Vector3.h>

namespace grasp_detection
{
template <class ContainerAllocator>
struct BoundingBox3D_
{
  typedef BoundingBox3D_<ContainerAllocator> Type;

  BoundingBox3D_()
    : object_id()
    , center()
    , size()  {
    }
  BoundingBox3D_(const ContainerAllocator& _alloc)
    : object_id(_alloc)
    , center(_alloc)
    , size(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _object_id_type;
  _object_id_type object_id;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::grasp_detection::BoundingBox3D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_detection::BoundingBox3D_<ContainerAllocator> const> ConstPtr;

}; // struct BoundingBox3D_

typedef ::grasp_detection::BoundingBox3D_<std::allocator<void> > BoundingBox3D;

typedef boost::shared_ptr< ::grasp_detection::BoundingBox3D > BoundingBox3DPtr;
typedef boost::shared_ptr< ::grasp_detection::BoundingBox3D const> BoundingBox3DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_detection::BoundingBox3D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_detection::BoundingBox3D_<ContainerAllocator1> & lhs, const ::grasp_detection::BoundingBox3D_<ContainerAllocator2> & rhs)
{
  return lhs.object_id == rhs.object_id &&
    lhs.center == rhs.center &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_detection::BoundingBox3D_<ContainerAllocator1> & lhs, const ::grasp_detection::BoundingBox3D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_detection::BoundingBox3D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_detection::BoundingBox3D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_detection::BoundingBox3D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "268b39b5abde96a8d0270813498c1aa3";
  }

  static const char* value(const ::grasp_detection::BoundingBox3D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x268b39b5abde96a8ULL;
  static const uint64_t static_value2 = 0xd0270813498c1aa3ULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_detection/BoundingBox3D";
  }

  static const char* value(const ::grasp_detection::BoundingBox3D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A 3D bounding box that can be positioned and rotated about its center (6 DOF)\n"
"# Dimensions of this box are in meters\n"
"\n"
"# ID or label of the detected object\n"
"string object_id\n"
"\n"
"# The 3D position and orientation of the bounding box center\n"
"geometry_msgs/Pose center\n"
"\n"
"# The size of the bounding box, in meters, surrounding the object's center\n"
"geometry_msgs/Vector3 size\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::grasp_detection::BoundingBox3D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.object_id);
      stream.next(m.center);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BoundingBox3D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_detection::BoundingBox3D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_detection::BoundingBox3D_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "object_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.object_id);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "center: ";
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "size: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_DETECTION_MESSAGE_BOUNDINGBOX3D_H
