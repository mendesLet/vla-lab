// Generated by gencpp from file joint_prediction/JointAxis.msg
// DO NOT EDIT!


#ifndef JOINT_PREDICTION_MESSAGE_JOINTAXIS_H
#define JOINT_PREDICTION_MESSAGE_JOINTAXIS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace joint_prediction
{
template <class ContainerAllocator>
struct JointAxis_
{
  typedef JointAxis_<ContainerAllocator> Type;

  JointAxis_()
    : joint_name()
    , axis()
    , origin()
    , type(0)  {
    }
  JointAxis_(const ContainerAllocator& _alloc)
    : joint_name(_alloc)
    , axis(_alloc)
    , origin(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _joint_name_type;
  _joint_name_type joint_name;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _axis_type;
  _axis_type axis;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef uint8_t _type_type;
  _type_type type;





  typedef boost::shared_ptr< ::joint_prediction::JointAxis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::joint_prediction::JointAxis_<ContainerAllocator> const> ConstPtr;

}; // struct JointAxis_

typedef ::joint_prediction::JointAxis_<std::allocator<void> > JointAxis;

typedef boost::shared_ptr< ::joint_prediction::JointAxis > JointAxisPtr;
typedef boost::shared_ptr< ::joint_prediction::JointAxis const> JointAxisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::joint_prediction::JointAxis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::joint_prediction::JointAxis_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::joint_prediction::JointAxis_<ContainerAllocator1> & lhs, const ::joint_prediction::JointAxis_<ContainerAllocator2> & rhs)
{
  return lhs.joint_name == rhs.joint_name &&
    lhs.axis == rhs.axis &&
    lhs.origin == rhs.origin &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::joint_prediction::JointAxis_<ContainerAllocator1> & lhs, const ::joint_prediction::JointAxis_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace joint_prediction

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::joint_prediction::JointAxis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::joint_prediction::JointAxis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_prediction::JointAxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::joint_prediction::JointAxis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_prediction::JointAxis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::joint_prediction::JointAxis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::joint_prediction::JointAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "27ce3d6dd4986aa57bba5e4b5251e6d3";
  }

  static const char* value(const ::joint_prediction::JointAxis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x27ce3d6dd4986aa5ULL;
  static const uint64_t static_value2 = 0x7bba5e4b5251e6d3ULL;
};

template<class ContainerAllocator>
struct DataType< ::joint_prediction::JointAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "joint_prediction/JointAxis";
  }

  static const char* value(const ::joint_prediction::JointAxis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::joint_prediction::JointAxis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines the joint axes of a robot. \n"
"\n"
"# The name of the joint\n"
"std_msgs/String joint_name\n"
"# Axis direction\n"
"geometry_msgs/Vector3 axis\n"
"# The origin of axis vector \n"
"geometry_msgs/Vector3 origin\n"
"# The joint type (same order as defined in Gazebo)\n"
"#   Joint_Type_REVOLUTE = 1,\n"
"#   Joint_Type_REVOLUTE2 = 2,\n"
"#   Joint_Type_PRISMATIC = 3,\n"
"#   Joint_Type_UNIVERSAL = 4,\n"
"#   Joint_Type_BALL = 5,\n"
"#   Joint_Type_SCREW = 6,\n"
"#   Joint_Type_GEARBOX = 7,\n"
"#   Joint_Type_FIXED = 8\n"
"###########################\n"
"uint8 type \n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::joint_prediction::JointAxis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::joint_prediction::JointAxis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.joint_name);
      stream.next(m.axis);
      stream.next(m.origin);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct JointAxis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::joint_prediction::JointAxis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::joint_prediction::JointAxis_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "joint_name: ";
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.joint_name);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "axis: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.axis);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "origin: ";
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JOINT_PREDICTION_MESSAGE_JOINTAXIS_H
